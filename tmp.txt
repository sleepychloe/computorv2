1. rational number
	$./computorv2
	> varA = 2
	2
	> varB = 4.242
	4.242
	> varC = -4.3
	-4.3
	>
2. imaginary number
	$./computorv2
	> varA = 2*i + 3
	3 + 2i
	> varB = -4i - 4
	-4 - 4i
	>
3. matrix
	$./computorv2
	> varA = [[2,3];[4,3]]
	[ 2 , 3 ]
	[ 4 , 3 ]
	> varB = [[3,4]]
	[ 3 , 4 ]
	>
4. function with only one variable
	$./computorv2
	> funA(x) = 2*x^5 + 4x^2 - 5*x + 4
	2 * x^5 + 4 * x^2 - 5*x + 4
	> funB(y) = 43 * y / (4 % 2 * y)
	43 * y / (4 % 2 * y)
	> funC(z) = -2 * z - 5
	-2 * z - 5
	>
5. reassign variable
	$./computorv2
	> x = 2
	2
	> y = x
	2
	> y = 7
	7
	> y = 2 * i - 4
	-4 + 2i
	>

	$./computorv2
	> varA = 2 + 4 *2 - 5 %4 + 2 * (4 + 5)
	27
	> varB = 2 * varA - 5 %4
	53
	> funA(x) = varA + varB * 4 - 1 / 2 + x
	238.5 + x
	> varC = 2 * varA - varB
	1
	> varD = funA(varC)
	239.5
	>


operation:
	1. +, -, *, /, %
	2. **	: standard matrix multiplication
			ex: varA = [[1, 2];[3, 4]]
			    varB = [[5, 6];[7, 8]]
			    -> varA**varB = [[1*5+2*7, 1*6+2*8];[3*5+4*7, 3*6+4*8]]
			    		  = [[19, 22];[43, 50]]
	3. *	: term-to-term multiplication of two matrices(=Hadamard product),
			scalar and a matrix
			ex1: varA = [[1, 2];[3, 4]]
			     varB = [[5, 6];[7, 8]]
			     -> varA*varB = [[1*5, 2*6];[3*7, 4*8]]
			    		  = [[5, 12];[21, 48]]
			ex2: varA = 3
			     varB = [[1, 2];[3, 4]]
			     -> varA*varB = [[3*1, 3*2];[3*3, 3*4]]
			    		  = [[3, 6];[9, 12]]
	4. ^	: integer and positive powers(or zero)
			base: any number
			power: 0, positiver integer, negative integer when base is not 0
			(n^0 = 1 for any n != 0,
			 don't have to handle negative like n^-3, 
			 nor non integer power like n^1.4)
	5. () allowed
	6. function/variable = ?
		: returns the value of the variable
			$./computorv2
			> a = 2 * 4 + 4
			12
			> a + 2 = ?
			14
			>
		
			$./computorv2
			> funA(x) = 2 * 4 + x
			8 + x
			> funB(x) = 4 -5 + (x + 2)^2 - 4
			(x + 2)^2 - 5
			> funC(x) = 4x + 5 - 2
			4 * x + 3
			> funA(2) + funB(4) = ?
			41
			> funC(3) = ?
			15
			>
	7. computation of the square roots of polynomials when the degree is less than or equal to 2,
		proposing on R or C
			$./computorv2
			> funA(x) = x^2 + 2x + 1
			x^2 + 2x + 1
			> y = 0
			0
			> funA(x) = y ?
			x^2 + 2x + 1 = 0
			Une solution sur R :
			-1
			>


syntax:
	1. variable/function name should only contain letters, must be case insensitive
		-> varA and vara is identical
		-> varA(=vara) and A(=a) are different variable
	2. no variable can be called i
	3. at each input validation, display the value stored in thre variable
		$./computorv2
		> varA = 2
		2
		> varB= 2 * (4 + varA + 3)
		18
		> varC =2 * varB
		36
		> varD    =    2 *(2 + 4 *varC -4 /3)
		289.333333333
		>
	4. 2 ∗ xx does not mean 2 ∗ x2 nor 2 ∗ x, xx here is considered as a variable

	-> didn't mention variable/function name should only contain same character,
		: varXYZ(=varxyz), funAAAA(AAAAA)(=funcaaaa(aaaa)) are valid
	5. matrix syntax: [[A0,0 , A0,1 , ...]; [A1,0 , A1,1 , ...]; ...]
		ex6. [[1]]	     : valid
		ex6. [[1];[2]]	     : valid
		ex1. [[1,2];[3,4]]   : valid
		ex6. [[1];]	     : invalid
		ex6. [[1,]]	     : invalid
	6. function syntax: form of functionName(variable) = ...
		-> AAAAA(aaaa) is valid




* every input should contain =

' ','\t',
'a' to 'z', 'A' to 'Z',
'0' to '9', '.', '(', ')', '[', ']', ';', ',', '=', '?', '+', '-', '*', '/', '%', '^'


-----------------------------------------------------------------------

<modulo> - choosed math way
in math: a % b = r (where r = a - b*floor(a/b), 0 <= r < abs(b))
	(floor(a / b): the greatest integer less than or equal to a/b
	  -> result of the division is rounded down to the nearest integer)
	ex1: 7 % 3 = 7 - 3*floor(7/3) = 7 - 3*2 = 1
	ex2: -7 % 3 = -7 -3*floor(-7/3) = -7 - 3*(-3) = 2
	ex3: 7 % -3 = 7 - (-3)*floor(7/-3) = 7 - (-3)*(-3) = -2
	ex4: -7 % -3 = -7 - (-3)*floor(-7/-3) = -7 - (-3)*2 = -1

in c, c++: result has same sign as the dividend
	ex1: 7 % 3 = +(abs(7) % abs(3)) = 1
	ex2: -7 % 3 = -(abs(7) % abs(3)) = -1
	ex3: 7 % -3 = +(abs(7) % abs(3)) = 1
	ex4: -7 % -3 = -(abs(7) % abs(3)) = -1



=======================================================================
=======================================================================
=======================================================================



1. check equal(=) sign
2. check invalid character
3. check number, check float point
4. remove space
5. convert operator
	- whenever it finds sqare bracket,
		make substr([...]),
		check its square brackets are pair,
		if it's vector or matrix
			-> check vector/matrix form,
				convert operator,
				check round bracket,
				check operator
	- otherwise continue converting operator
6. check syntax
	- check question mark
	- round bracket(left, right term seperately)
	- square bracket(left, right term seperately)
	- check caret(left, right term seperately)
	- check operator(left, right term seperately)
		-> skip round and square brackets
	- convert every upper case alphabet to lower case
(later: 7. remove bracket)
8. split term, seperated by OP_OPERATOR
9. set type of term
	- types: TYPE_NUMBER, TYPE_VECTOR, TYPE_MATRIX
	- TYPE_NUMBER
	    1) check if it's valid term
		* number : every character is number('0' to '9', '.', '^', 'i'),
		* variable : every character is alphabet('a' to 'z'),
		* function : round bracket pair exists
			- function name
				: every character is alphabet('a' to 'z')
			- variable(inside bracket)
				: if every character is number,
				function name should already be saved
		* else it's not valid term
	    2) if it's number
	    	: convert string to ValueSet
	    3) if it's variable or function
	    	: later
	(- TYPE_VECTOR)
	(- TYPE_MATRIX)

-----------------------------------------------------------------------

todo:

9.set type of term - TYPE_VECTOR, TYPE_MATRIX
	: same logic as TYPE_NUMBER
		- when it's vector: check every element using while loop
		- when it's matrix: check every element using while loop 2 times
					(could re-use vector checking function)
		- convert string to ValueSet

** when round brackets get removed, use check_operator() first
** when caret calculates, check again
	: don't allow negative power if base is not 0
	(after var, func -> num)

-----------------------------------------------------------------------

types:	- float
	- Complex<float>
	- Vector<float>
	- Vector<Complex<float>>
	- Matrix<float>
	- Matrix<Complex<float>>

-------------------------------------------

caret(^):
- base:
	* float -> ok
	* complex<float> -> ok
	* Vector<float> -> no
	* Vector<Complex<float>> -> no
	* Matrix<float> -> no
	* Matrix<Complex<float>> -> no
- power:
	* float -> ok
		: + -> allowed
		: - -> allowed
		: '0' to '9' -> allowed
		: only ±int value allowed
	* Complex<float> -> no
	* Vector<float> -> no
	* Vector<Complex<float>> -> no
	* Matrix<float> -> no
	* Matrix<Complex<float>> -> no

-------------------------------------------

operation(+, -, *, **, /, %):

1. +
	- float + float
	- float + complex<float>
	- Complex<float> + float
	- Complex<float> + Complex<float>
		-> need to check result type
	- other cases: can't caluclate
2. -
	- float - float
	- float - complex<float>
	- Complex<float> - float
	- Complex<float> - Complex<float>
		-> need to check result type
	- other cases: can't caluclate
3. *: multiplication, term-to-term multiplication(=Hadamard product)
	- float * float
	- float * Complex<float>
	- float * Vector<float>
		-> scale
	- float * Vector<Complex<float>>
		-> scale
	- float * Matrix<float>
		-> scale
	- float * Matrix<Complex<float>>
		-> scale

	- Complex<float> * float
	- Complex<float> * Complex<float>
	- Complex<float> * Vector<float>
		-> scale
	- Complex<float> * Vector<Complex<float>>
		-> scale
	- Complex<float> * Matrix<float>
		-> scale
	- Complex<float> * Matrix<Complex<float>>
		-> scale

	- Vector<float> * float
		-> scale
	- Vector<float> * Complex<float>
		-> scale
	- Vector<float> * Vector<float>
		-> dot operator(print message)
	- Vector<float> * Vector<Complex<float>>
		-> dot operator(print message)
	- Vector<float> * other cases: can't caluclate

	- Vector<Complex<float>> * float
		-> scale
	- Vector<Complex<float>> * Complex<float>
		-> scale
	- Vector<Comlex<float>> * Vector<float>
		-> dot operator(print message)
	- Vector<Complex<float>> * Vector<Complex<float>>
		-> dot operator(print message)
	- Vector<Complex<float>> * other cases : can't calculate

	- Matrix<float> * float
		-> scale
	- Matrix<float> * Complex<float>
		-> scale
	- Matrix<float> * Vector<float>
		-> mul_vec(), error check in Matrix<T> class
	- Matrix<float> * Vector<Complex<float>>
		-> change Matrix<float> to Matrix<Complex<float>>,
			mul_vec(), error check in Matrix<T> class
	- Matrix<float> * Matrix<float>
		-> term-to-term multiplication(=Hadamard product),
			error check in Matrix<T> class
	- Matrix<float> * Matrix<Complec<float>>
		-> change Matrix<float> to Matrix<Complex<float>>,
			term-to-term multiplication(=Hadamard product),
			error check in Matrix<> class

	- Matrix<Complex<float>> * float
		-> scale
	- Matrix<Complex<float>> * Complex<float>
		-> scale
	- Matrix<Complex<float>> * Vector<float>
		-> change Vector<float> to Vector<Complex<float>>,
			mul_vec(), error check in Matrix<T> class
	- Matrix<Complex<float>> * Vector<Complex<float>>
		-> mul_vec(), error check in Matrix<T> class
	- Matrix<Complex<float>> * Matrix<float>
		-> change Matrix<float> to Matrix<Complex<float>>,
			term-to-term multiplication(=Hadamard product),
			error check in Matrix<T> class
	- Matrix<Complex<float>> * Matrix<Complec<float>>
		-> term-to-term multiplication(=Hadamard product),
			error check in Matrix<> class
4. **(standard matrix multiplication)
	- Matrix<float> ** Matrix<float>
		-> mul_mat(), error check in Matrix<T> class
	- Matrix<float> ** Matrix<Complex<float>>
		-> change Matrix<float> to Matrix<Complex<float>>,
			mul_mat(), error check in Matrix<T> class
	- Matrix<Comlex<float>> ** Matrix<float>
		-> change Matrix<float> to Matrix<Complex<float>>,
			mul_mat(), error check in Matrix<T> class
	- Matrix<Complex<float>> ** Matrix<Complex<float>>
		-> mul_mat(), error check in Matrix<T> class
	- other cases: can't caluclate
5. /
	- float / float
		-> check denominator is not 0
	- float / Complex<float>
		-> check denominator is not 0
	- Complex<float> / float
		-> check denominator is not 0
	- Complex<float> / Complex<float>
		-> check denominator is not 0
	- Vector<float> / float
		-> check denominator is not 0
	- Vector<float> / Complex<float>
		-> change Vector<float> to Vector<Complex<float>>,
			check denominator is not 0
	- Vector<Complex<float>> / float
		-> check denominator is not 0
	- Vector<Complex<float>> / Complecx<float>
		-> check denominator is not 0
	- Matrix<float> / float
		-> check denominator is not 0
	- Matrix<float> / Complex<float>
		-> check denominator is not 0
	- Matrix<Complex<float>> / float
		-> check denominator is not 0
	- Matrix<Complex<float>> / Comlex<float>
		-> check denominator is not 0
6. %: a % b, where a is real number, b is int and not 0
	- float % float
		-> check range of b
			(make sure b is int and not 0)
