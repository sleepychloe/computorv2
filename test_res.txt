chloe@spooky-pc:~/Desktop/computorv2/computorv2$ valgrind ./computorv2
==485137== Memcheck, a memory error detector
==485137== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==485137== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==485137== Command: ./computorv2
==485137== 
🐣 Welcom to the computorv2 🐣
type 'exit' to quit !

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong equation
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 15
		  wrong equation
		  ~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> adfasdfasf
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 11
		  adfasdfasf
		  ~~~~~~~~~~^

> a == a
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign used multiple times: at position 4
		  a == a
		  ~~~^

> a = a = a
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign used multiple times: at position 7
		  a = a = a
		  ~~~~~~^

> adfasdf=
Parse.cpp: Parse::check_each_term(std::string str)
error: syntax error: invalid equation form: right term does not exist: at position 9
		  adfasdf=
		  ~~~~~~~~^

> adfasdf=     
Parse.cpp: Parse::check_each_term(std::string str)
error: syntax error: invalid equation form: right term does not exist: at position 14
		  adfasdf=     
		  ~~~~~~~~~~~~~^

> =sfsdf
Parse.cpp: Parse::check_each_term(std::string str)
error: syntax error: invalid equation form: left term does not exist: at position 1
		  =sfsdf
		  ^

>        =sfsdf
Parse.cpp: Parse::check_each_term(std::string str)
error: syntax error: invalid equation form: left term does not exist: at position 8
		         =sfsdf
		  ~~~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> invalid character
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 18
		  invalid character
		  ~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> x+1=~0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 5
		  x+1=~0
		  ~~~~^

> x+1=!0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 5
		  x+1=!0
		  ~~~~^

> x@1=0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 2
		  x@1=0
		  ~^

> x#1=0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 2
		  x#1=0
		  ~^

> x$1=0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 2
		  x$1=0
		  ~^

> x&1=0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 2
		  x&1=0
		  ~^

> x_1=0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 2
		  x_1=0
		  ~^

> x\1=0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 2
		  x\1=0
		  ~^

> x|1=0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 2
		  x|1=0
		  ~^

> x+1<=0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 4
		  x+1<=0
		  ~~~^

> x+1>=0
Parse.cpp: Parse::check_invalid_character(std::string str)
error: syntax error: invalid character exists: at position 4
		  x+1>=0
		  ~~~^

> x+1,0=0
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 4
		  x+1,0=0
		  ~~~^

> x+1=0;
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 6
		  x+1=0;
		  ~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong number, wrong float point
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 32
		  wrong number, wrong float point
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> x^2+1 1=0
Parse.cpp: Parse::check_number(std::string str)
error: syntax error: no operator between numbers: at position 6
		  x^2+1 1=0
		  ~~~~~^

> x^2+1=0 0
Parse.cpp: Parse::check_number(std::string str)
error: syntax error: no operator between numbers: at position 8
		  x^2+1=0 0
		  ~~~~~~~^

> x^2+.1=0
Parse.cpp: Parse::check_number(std::string str)
error: syntax error: incorrect location of floating point: at position 5
		  x^2+.1=0
		  ~~~~^

> x^2+1.=0
Parse.cpp: Parse::check_number(std::string str)
error: syntax error: incorrect location of floating point: at position 6
		  x^2+1.=0
		  ~~~~~^

> x^2+1..0=0
Parse.cpp: Parse::check_number(std::string str)
error: syntax error: incorrect location of floating point: at position 6
		  x^2+1..0=0
		  ~~~~~^

> x^2+1.0.0=0
Parse.cpp: check_float_point(std::string str)
error: syntax error: incorrect use of floating point: used multiple times in one number: at position 8
		  x^2+1.0.0=0
		  ~~~~~~~^

> x^2+1.000001=0
Parse.cpp: check_float_point(std::string str)
error: syntax error: incorrect use of floating point: supports up to the fifth decimal place: at position 12
		  x^2+1.000001=0
		  ~~~~~~~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong syntax question mark
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 27
		  wrong syntax question mark
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ?x+1=0
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 1
		  ?x+1=0
		  ^

> x?+1=0
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 2
		  x?+1=0
		  ~^

> x+?1=0
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 3
		  x+?1=0
		  ~~^

> x+1?=0
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 4
		  x+1?=0
		  ~~~^

> x+1=?0
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 5
		  x+1=?0
		  ~~~~^

> ?=x+1
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 1
		  ?=x+1
		  ^

> ?0=x+1
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 1
		  ?0=x+1
		  ^

> 0?=x+1
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 2
		  0?=x+1
		  ~^

> 0=?x+1
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 3
		  0=?x+1
		  ~~^

> 0=x?+1
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 4
		  0=x?+1
		  ~~~^

> 0=x+?1
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 5
		  0=x+?1
		  ~~~~^

> x+1=??
Parse.cpp: Parse::check_question_mark(std::string str)
error: syntax error: no operator between numbers: at position 5
		  x+1=??
		  ~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong syntax caret
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 19
		  wrong syntax caret
		  ~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ^1=0
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 1
		  ^1=0
		  ^

> 1^=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect location of caret(^): power is missed: at position 2
		  1^=0
		  ~^

> 0=^1
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 3
		  0=^1
		  ~~^

> 0=1^
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect location of caret(^): power is missed: at position 4
		  0=1^
		  ~~~^

> 1^^2=0
Parse.cpp: Parse::check_caret(std::string str)
error: syntax error: incorrect use of caret(^): used multiple times: at position 3
		  1^^2=0
		  ~~^

> 1^1.1=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect power of caret(^): supports only int value for power: at position 4
		  1^1.1=0
		  ~~~^

> ^a=0
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 1
		  ^a=0
		  ^

> a^=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect location of caret(^): power is missed: at position 2
		  a^=0
		  ~^

> 0=^a
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 3
		  0=^a
		  ~~^

> 0=a^
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect location of caret(^): power is missed: at position 4
		  0=a^
		  ~~~^

> 1+^2+3=0
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 3
		  1+^2+3=0
		  ~~^

> a^^2=0
Parse.cpp: Parse::check_caret(std::string str)
error: syntax error: incorrect use of caret(^): used multiple times: at position 3
		  a^^2=0
		  ~~^

> a^1.1=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect power of caret(^): supports only int value for power: at position 4
		  a^1.1=0
		  ~~~^

> ^(x+1)=0
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 1
		  ^(x+1)=0
		  ^

> (x+1)^=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect location of caret(^): power is missed: at position 6
		  (x+1)^=0
		  ~~~~~^

> ^1+1=0
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 1
		  ^1+1=0
		  ^

> 0=^1+1
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 3
		  0=^1+1
		  ~~^

> 1^^2+1=0
Parse.cpp: Parse::check_caret(std::string str)
error: syntax error: incorrect use of caret(^): used multiple times: at position 3
		  1^^2+1=0
		  ~~^

> 1^1.1+1=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect power of caret(^): supports only int value for power: at position 4
		  1^1.1+1=0
		  ~~~^

> ^a+1=0
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 1
		  ^a+1=0
		  ^

> 0=^a+1
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 3
		  0=^a+1
		  ~~^

> a^^2+1=0
Parse.cpp: Parse::check_caret(std::string str)
error: syntax error: incorrect use of caret(^): used multiple times: at position 3
		  a^^2+1=0
		  ~~^

> a^1.1+1=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect power of caret(^): supports only int value for power: at position 4
		  a^1.1+1=0
		  ~~~^

> ^(x+1)+1=0
Parse.cpp: Parse::check_caret_base(std::string str, size_t i, size_t pos)
error: syntax error: incorrect location of caret(^): base is missed: at position 1
		  ^(x+1)+1=0
		  ^

> 1^+1=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect location of caret(^): power is missed: at position 2
		  1^+1=0
		  ~^

> 1^-1=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect location of caret(^): power is missed: at position 2
		  1^-1=0
		  ~^

> a^+1=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect location of caret(^): power is missed: at position 2
		  a^+1=0
		  ~^

> a^-1=0
Parse.cpp: Parse::check_caret_power(std::string str, size_t &i, size_t pos)
error: syntax error: incorrect location of caret(^): power is missed: at position 2
		  a^-1=0
		  ~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong syntax round bracket
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 27
		  wrong syntax round bracket
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> x^2+((1)=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 8
		  x^2+((1)=0
		  ~~~~~~~^

> x^2+(1))=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 8
		  x^2+(1))=0
		  ~~~~~~~^

> x^2+(1=0)
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 6
		  x^2+(1=0)
		  ~~~~~^

> x^2+)1(=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 5
		  x^2+)1(=0
		  ~~~~^

> x^2+1()=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 7
		  x^2+1()=0
		  ~~~~~~^

> (x^2))+((1)=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 6
		  (x^2))+((1)=0
		  ~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong syntax square bracket
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 28
		  wrong syntax square bracket
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> x^2+[[1]=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 8
		  x^2+[[1]=0
		  ~~~~~~~^

> x^2+[1]]=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 8
		  x^2+[1]]=0
		  ~~~~~~~^

> x^2+[1=0]
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 6
		  x^2+[1=0]
		  ~~~~~^

> x^2+]1[=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 5
		  x^2+]1[=0
		  ~~~~^

> x^2+1[]=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 7
		  x^2+1[]=0
		  ~~~~~~^

> [x^2]]+[[1]=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 6
		  [x^2]]+[[1]=0
		  ~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong vector form
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 18
		  wrong vector form
		  ~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> a=[];
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 4
		  a=[];
		  ~~~^

> a=[;]
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 4
		  a=[;]
		  ~~~^

> a=[,];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 4
		  a=[,];
		  ~~~^

> a=[,1];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 4
		  a=[,1];
		  ~~~^

> a=[1,];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 5
		  a=[1,];
		  ~~~~^

> a=[1,2];
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 8
		  a=[1,2];
		  ~~~~~~~^

> a=[,1,2];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 4
		  a=[,1,2];
		  ~~~^

> a=[1,2,];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 7
		  a=[1,2,];
		  ~~~~~~^

> a=[,1,2,];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 4
		  a=[,1,2,];
		  ~~~^

> a=[1,2,,];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 8
		  a=[1,2,,];
		  ~~~~~~~^

> a=[1,2,,3];
Parse.cpp: Parse::check_vector_form(int type, std::string str, size_t pos)
error: syntax error: invalid vector form: invalid use of comma(,): at position 8
		  a=[1,2,,3];
		  ~~~~~~~^

> a=[1,2,3;];
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 9
		  a=[1,2,3;];
		  ~~~~~~~~^

> a=[]
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 4
		  a=[]
		  ~~~^

> a=[;]
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 4
		  a=[;]
		  ~~~^

> a=[,]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 4
		  a=[,]
		  ~~~^

> a=[,1]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 4
		  a=[,1]
		  ~~~^

> a=[1,]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 5
		  a=[1,]
		  ~~~~^

> a=[,1,2]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 4
		  a=[,1,2]
		  ~~~^

> a=[1,2,]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 7
		  a=[1,2,]
		  ~~~~~~^

> a=[,1,2,]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 4
		  a=[,1,2,]
		  ~~~^

> a=[1,2,,]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 8
		  a=[1,2,,]
		  ~~~~~~~^

> a=[1,2,,3]
Parse.cpp: Parse::check_vector_form(int type, std::string str, size_t pos)
error: syntax error: invalid vector form: invalid use of comma(,): at position 8
		  a=[1,2,,3]
		  ~~~~~~~^

> a=[1,2,3;]
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 9
		  a=[1,2,3;]
		  ~~~~~~~~^

> [];=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 2
		  [];=a
		  ~^

> [;]=a
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 2
		  [;]=a
		  ~^

> [,];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 2
		  [,];=a
		  ~^

> [,1];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 2
		  [,1];=a
		  ~^

> [1,];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 3
		  [1,];=a
		  ~~^

> [1,2];=a
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 6
		  [1,2];=a
		  ~~~~~^

> [,1,2];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 2
		  [,1,2];=a
		  ~^

> [1,2,];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 5
		  [1,2,];=a
		  ~~~~^

> [,1,2,];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 2
		  [,1,2,];=a
		  ~^

> [1,2,,];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 6
		  [1,2,,];=a
		  ~~~~~^

> [1,2,,3];=a
Parse.cpp: Parse::check_vector_form(int type, std::string str, size_t pos)
error: syntax error: invalid vector form: invalid use of comma(,): at position 6
		  [1,2,,3];=a
		  ~~~~~^

> [1,2,3;];=a
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 7
		  [1,2,3;];=a
		  ~~~~~~^

> []=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 2
		  []=a
		  ~^

> [;]=a
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 2
		  [;]=a
		  ~^

> [,]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 2
		  [,]=a
		  ~^

> [,1]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 2
		  [,1]=a
		  ~^

> [1,]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 3
		  [1,]=a
		  ~~^

> [,1,2]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 2
		  [,1,2]=a
		  ~^

> [1,2,]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 5
		  [1,2,]=a
		  ~~~~^

> [,1,2,]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 2
		  [,1,2,]=a
		  ~^

> [1,2,,]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid verctor form: invalid use of comma(,): at position 6
		  [1,2,,]=a
		  ~~~~~^

> [1,2,,3]=a
Parse.cpp: Parse::check_vector_form(int type, std::string str, size_t pos)
error: syntax error: invalid vector form: invalid use of comma(,): at position 6
		  [1,2,,3]=a
		  ~~~~~^

> [1,2,3;]=a
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 7
		  [1,2,3;]=a
		  ~~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong matrix form
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 18
		  wrong matrix form
		  ~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> a=[[]]
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 5
		  a=[[]]
		  ~~~~^

> a=[;[]]
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 6
		  a=[;[]]
		  ~~~~~^

> a=[[];]
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 5
		  a=[[];]
		  ~~~~^

> a=[,[]]
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 6
		  a=[,[]]
		  ~~~~~^

> a=[[],]
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 5
		  a=[[],]
		  ~~~~^

> a=[;[1]]
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 4
		  a=[;[1]]
		  ~~~^

> a=[[1];]
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 7
		  a=[[1];]
		  ~~~~~~^

> a=[,[1]]
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 4
		  a=[,[1]]
		  ~~~^

> a=[[,]]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 5
		  a=[[,]]
		  ~~~~^

> a=[[1],]
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 7
		  a=[[1],]
		  ~~~~~~^

> a=[[1,]]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 6
		  a=[[1,]]
		  ~~~~~^

> a=[[1];]
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 7
		  a=[[1];]
		  ~~~~~~^

> a=[[1,2,]]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 8
		  a=[[1,2,]]
		  ~~~~~~~^

> a=[[1,,2]]
Parse.cpp: Parse::check_vector_form(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 7
		  a=[[1,,2]]
		  ~~~~~~^

> a=[[1,2];]
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 9
		  a=[[1,2];]
		  ~~~~~~~~^

> a=[[1];;[2]]
Parse.cpp: Parse::check_matrix_form(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 8
		  a=[[1];;[2]]
		  ~~~~~~~^

> a=[[1];[2,]]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 10
		  a=[[1];[2,]]
		  ~~~~~~~~~^

> a=[[1];[2];]
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 11
		  a=[[1];[2];]
		  ~~~~~~~~~~^

> a=[[1];[2,3]]
Parse.cpp: Parse::check_matrix_column(std::string row, size_t i, size_t pos)
error: syntax error: invalid matrix form: column size of each row should be same: at position 12
		  a=[[1];[2,3]]
		  ~~~~~~~~~~~^

> a=[[1,2];[[3];[4]]]
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 11
		  a=[[1,2];[[3];[4]]]
		  ~~~~~~~~~~^

> a=[[1,2];[[3,4]]]
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 11
		  a=[[1,2];[[3,4]]]
		  ~~~~~~~~~~^

> a=[[]];
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 5
		  a=[[]];
		  ~~~~^

> a=[;[]];
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 6
		  a=[;[]];
		  ~~~~~^

> a=[[];];
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 5
		  a=[[];];
		  ~~~~^

> a=[,[]]
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 6
		  a=[,[]]
		  ~~~~~^

> a=[[],]
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 5
		  a=[[],]
		  ~~~~^

> a=[;[1]];
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 4
		  a=[;[1]];
		  ~~~^

> a=[[1];];
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 7
		  a=[[1];];
		  ~~~~~~^

> a=[,[1]]
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 4
		  a=[,[1]]
		  ~~~^

> a=[[,]]
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 5
		  a=[[,]]
		  ~~~~^

> a=[[1],]
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 7
		  a=[[1],]
		  ~~~~~~^

> a=[[1,]];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 6
		  a=[[1,]];
		  ~~~~~^

> a=[[1];];
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 7
		  a=[[1];];
		  ~~~~~~^

> a=[[1,2,]];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 8
		  a=[[1,2,]];
		  ~~~~~~~^

> a=[[1,,2]];
Parse.cpp: Parse::check_vector_form(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 7
		  a=[[1,,2]];
		  ~~~~~~^

> a=[[1,2];];
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 9
		  a=[[1,2];];
		  ~~~~~~~~^

> a=[[1];;[2]];
Parse.cpp: Parse::check_matrix_form(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 8
		  a=[[1];;[2]];
		  ~~~~~~~^

> a=[[1];[2,]];
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 10
		  a=[[1];[2,]];
		  ~~~~~~~~~^

> a=[[1];[2];];
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 11
		  a=[[1];[2];];
		  ~~~~~~~~~~^

> a=[[1];[2,3]];
Parse.cpp: Parse::check_matrix_column(std::string row, size_t i, size_t pos)
error: syntax error: invalid matrix form: column size of each row should be same: at position 12
		  a=[[1];[2,3]];
		  ~~~~~~~~~~~^

> a=[[1,2];[[3];[4]]];
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 11
		  a=[[1,2];[[3];[4]]];
		  ~~~~~~~~~~^

> a=[[1,2];[[3,4]]];
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 11
		  a=[[1,2];[[3,4]]];
		  ~~~~~~~~~~^

> [[]]=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 3
		  [[]]=a
		  ~~^

> [;[]]=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 4
		  [;[]]=a
		  ~~~^

> [[];]=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 3
		  [[];]=a
		  ~~^

> [,[]]=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 4
		  [,[]]=a
		  ~~~^

> [[],]=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 3
		  [[],]=a
		  ~~^

> [;[1]]=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 2
		  [;[1]]=a
		  ~^

> [[1];]=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 5
		  [[1];]=a
		  ~~~~^

> [,[1]]=a
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 2
		  [,[1]]=a
		  ~^

> [[,]]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 3
		  [[,]]=a
		  ~~^

> [[1],]=a
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 5
		  [[1],]=a
		  ~~~~^

> [[1,]]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 4
		  [[1,]]=a
		  ~~~^

> [[1];]=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 5
		  [[1];]=a
		  ~~~~^

> [[1,2,]]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 6
		  [[1,2,]]=a
		  ~~~~~^

> [[1,,2]]=a
Parse.cpp: Parse::check_vector_form(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 5
		  [[1,,2]]=a
		  ~~~~^

> [[1,2];]=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 7
		  [[1,2];]=a
		  ~~~~~~^

> [[1];;[2]]=a
Parse.cpp: Parse::check_matrix_form(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 6
		  [[1];;[2]]=a
		  ~~~~~^

> [[1];[2,]]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 8
		  [[1];[2,]]=a
		  ~~~~~~~^

> [[1];[2];]=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 9
		  [[1];[2];]=a
		  ~~~~~~~~^

> [[1];[2,3]]=a
Parse.cpp: Parse::check_matrix_column(std::string row, size_t i, size_t pos)
error: syntax error: invalid matrix form: column size of each row should be same: at position 10
		  [[1];[2,3]]=a
		  ~~~~~~~~~^

> [[1,2];[[3];[4]]]=a
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 9
		  [[1,2];[[3];[4]]]=a
		  ~~~~~~~~^

> [[1,2];[[3,4]]]=a
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 9
		  [[1,2];[[3,4]]]=a
		  ~~~~~~~~^

> [[]];=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 3
		  [[]];=a
		  ~~^

> [;[]];=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 4
		  [;[]];=a
		  ~~~^

> [[];];=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 3
		  [[];];=a
		  ~~^

> [,[]]=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 4
		  [,[]]=a
		  ~~~^

> [[],]=a
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: no character in the brackets: at position 3
		  [[],]=a
		  ~~^

> [;[1]];=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 2
		  [;[1]];=a
		  ~^

> [[1];];=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 5
		  [[1];];=a
		  ~~~~^

> [,[1]]=a
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 2
		  [,[1]]=a
		  ~^

> [[,]]=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 3
		  [[,]]=a
		  ~~^

> [[1],]=a
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 5
		  [[1],]=a
		  ~~~~^

> [[1,]];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 4
		  [[1,]];=a
		  ~~~^

> [[1];];=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 5
		  [[1];];=a
		  ~~~~^

> [[1,2,]];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 6
		  [[1,2,]];=a
		  ~~~~~^

> [[1,,2]];=a
Parse.cpp: Parse::check_vector_form(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 5
		  [[1,,2]];=a
		  ~~~~^

> [[1,2];];=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 7
		  [[1,2];];=a
		  ~~~~~~^

> [[1];;[2]];=a
Parse.cpp: Parse::check_matrix_form(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 6
		  [[1];;[2]];=a
		  ~~~~~^

> [[1];[2,]];=a
Parse.cpp: Parse::check_vector_str(int type, std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of comma(,): at position 8
		  [[1];[2,]];=a
		  ~~~~~~~^

> [[1];[2];];=a
Parse.cpp: Parse::check_matrix_str(std::string str, size_t pos)
error: syntax error: invalid matrix form: invalid use of semi-colon(;): at position 9
		  [[1];[2];];=a
		  ~~~~~~~~^

> [[1];[2,3]];=a
Parse.cpp: Parse::check_matrix_column(std::string row, size_t i, size_t pos)
error: syntax error: invalid matrix form: column size of each row should be same: at position 10
		  [[1];[2,3]];=a
		  ~~~~~~~~~^

> [[1,2];[[3];[4]]];=a
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 9
		  [[1,2];[[3];[4]]];=a
		  ~~~~~~~~^

> [[1,2];[[3,4]]];=a
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 9
		  [[1,2];[[3,4]]];=a
		  ~~~~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong syntax bracket mixed
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 27
		  wrong syntax bracket mixed
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ([)]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 3
		  ([)]=0
		  ~~^

> ([1)2]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 4
		  ([1)2]=0
		  ~~~^

> (1[2)]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 5
		  (1[2)]=0
		  ~~~~^

> (1[2)3]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 5
		  (1[2)3]=0
		  ~~~~^

> [(])=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 2
		  [(])=0
		  ~^

> [(1]2)=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 2
		  [(1]2)=0
		  ~^

> [1(2])=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 3
		  [1(2])=0
		  ~~^

> [1(2]3)=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 3
		  [1(2]3)=0
		  ~~^

> (([))]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 4
		  (([))]=0
		  ~~~^

> (([1))2]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 5
		  (([1))2]=0
		  ~~~~^

> ((1[2))]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 6
		  ((1[2))]=0
		  ~~~~~^

> ((1[2))3]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 6
		  ((1[2))3]=0
		  ~~~~~^

> [[(]])=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 3
		  [[(]])=0
		  ~~^

> [[(1]]2)=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 3
		  [[(1]]2)=0
		  ~~^

> [[1(2]])=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 4
		  [[1(2]])=0
		  ~~~^

> [[1(2]]3)=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 4
		  [[1(2]]3)=0
		  ~~~^

> ((([)))]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 5
		  ((([)))]=0
		  ~~~~^

> ((([1)))2]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 6
		  ((([1)))2]=0
		  ~~~~~^

> (((1[2)))]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 7
		  (((1[2)))]=0
		  ~~~~~~^

> (((1[2)))3]=0
Parse.cpp: Parse::check_vector_element(int type, char c, size_t pos)
error: syntax error: invalid vector form: invalid character exists: at position 7
		  (((1[2)))3]=0
		  ~~~~~~^

> [[[(]]])=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 3
		  [[[(]]])=0
		  ~~^

> [[[(1]]]2)=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 3
		  [[[(1]]]2)=0
		  ~~^

> [[[1(2]]])=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 3
		  [[[1(2]]])=0
		  ~~^

> [[[1(2]]]3)=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid use of bracets: at position 3
		  [[[1(2]]]3)=0
		  ~~^

> ([([)])]=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 3
		  ([([)])]=0
		  ~~^

> ([([1)])2]=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 3
		  ([([1)])2]=0
		  ~~^

> ([(1[2)])]=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 3
		  ([(1[2)])]=0
		  ~~^

> ([(1[2)])3]=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 3
		  ([(1[2)])3]=0
		  ~~^

> [([(])])=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 2
		  [([(])])=0
		  ~^

> [([(1])]2)=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 2
		  [([(1])]2)=0
		  ~^

> [([1(2])])=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 2
		  [([1(2])])=0
		  ~^

> [([1(2])]3)=0
Parse.cpp: Parse::check_matrix_row(std::string row, size_t pos)
error: syntax error: invalid matrix form: invalid character exists: at position 2
		  [([1(2])]3)=0
		  ~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong syntax operator
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 22
		  wrong syntax operator
		  ~~~~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> x^2++1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2++1=0
		  ~~~~^

> x^2+-1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2+-1=0
		  ~~~~^

> x^2+*1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2+*1=0
		  ~~~~^

> x^2+**1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2+**1=0
		  ~~~~^

> x^2+/1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2+/1=0
		  ~~~~^

> x^2+%1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2+%1=0
		  ~~~~^

> x^2-+1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2-+1=0
		  ~~~~^

> x^2--1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2--1=0
		  ~~~~^

> x^2-*1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2-*1=0
		  ~~~~^

> x^2-**1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2-**1=0
		  ~~~~^

> x^2-/1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2-/1=0
		  ~~~~^

> x^2-%1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2-%1=0
		  ~~~~^

> x^2*+1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2*+1=0
		  ~~~~^

> x^2*-1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2*-1=0
		  ~~~~^

> x^2***1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2***1=0
		  ~~~~^

> x^2*/1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2*/1=0
		  ~~~~^

> x^2*%1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2*%1=0
		  ~~~~^

> x^2**+1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2**+1=0
		  ~~~~^

> x^2**-1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2**-1=0
		  ~~~~^

> x^2***1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2***1=0
		  ~~~~^

> x^2****1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2****1=0
		  ~~~~^

> x^2**/1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2**/1=0
		  ~~~~^

> x^2**%1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2**%1=0
		  ~~~~^

> x^2/+1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2/+1=0
		  ~~~~^

> x^2/-1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2/-1=0
		  ~~~~^

> x^2/*1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2/*1=0
		  ~~~~^

> x^2/**1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2/**1=0
		  ~~~~^

> x^2//1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2//1=0
		  ~~~~^

> x^2/%1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 5
		  x^2/%1=0
		  ~~~~^

> *x^2+1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 1
		  *x^2+1=0
		  ^

> **x^2+1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 1
		  **x^2+1=0
		  ^

> /x^2+1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 1
		  /x^2+1=0
		  ^

> %x^2+1=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 1
		  %x^2+1=0
		  ^

> x^2+1+=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 6
		  x^2+1+=0
		  ~~~~~^

> x^2+1-=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 6
		  x^2+1-=0
		  ~~~~~^

> x^2+1*=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 6
		  x^2+1*=0
		  ~~~~~^

> x^2+1**=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 6
		  x^2+1**=0
		  ~~~~~^

> x^2+1/=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 6
		  x^2+1/=0
		  ~~~~~^

> x^2+1%=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 6
		  x^2+1%=0
		  ~~~~~^

> x^2+1=*0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 7
		  x^2+1=*0
		  ~~~~~~^

> x^2+1=**0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 7
		  x^2+1=**0
		  ~~~~~~^

> x^2+1=/0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 7
		  x^2+1=/0
		  ~~~~~~^

> x^2+1=%0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 7
		  x^2+1=%0
		  ~~~~~~^

> x^2+1=0+
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 8
		  x^2+1=0+
		  ~~~~~~~^

> x^2+1=0-
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 8
		  x^2+1=0-
		  ~~~~~~~^

> x^2+1=0*
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 8
		  x^2+1=0*
		  ~~~~~~~^

> x^2+1=0**
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 8
		  x^2+1=0**
		  ~~~~~~~^

> x^2+1=0/
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 8
		  x^2+1=0/
		  ~~~~~~~^

> x^2+1=0%
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number after using operator: at position 8
		  x^2+1=0%
		  ~~~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong syntax operator: bracket
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 31
		  wrong syntax operator: bracket
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 1+(x^2++1)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 8
		  1+(x^2++1)=0
		  ~~~~~~~^

> 1+(x^2+-1)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 8
		  1+(x^2+-1)=0
		  ~~~~~~~^

> 1+(x^2+*1)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 8
		  1+(x^2+*1)=0
		  ~~~~~~~^

> 1+(x^2+**1)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 8
		  1+(x^2+**1)=0
		  ~~~~~~~^

> 1+(x^2+/1)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 8
		  1+(x^2+/1)=0
		  ~~~~~~~^

> 1+(x^2+%1)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 8
		  1+(x^2+%1)=0
		  ~~~~~~~^

> 1+(2+(x^2++1)+3)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 11
		  1+(2+(x^2++1)+3)=0
		  ~~~~~~~~~~^

> 1+(2+(x^2+-1)+3)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 11
		  1+(2+(x^2+-1)+3)=0
		  ~~~~~~~~~~^

> 1+(2+(x^2+*1)+3)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 11
		  1+(2+(x^2+*1)+3)=0
		  ~~~~~~~~~~^

> 1+(2+(x^2+**1)+3)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 11
		  1+(2+(x^2+**1)+3)=0
		  ~~~~~~~~~~^

> 1+(2+(x^2+/1)+3)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 11
		  1+(2+(x^2+/1)+3)=0
		  ~~~~~~~~~~^

> 1+(2+(x^2+%1)+3)=0
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 11
		  1+(2+(x^2+%1)+3)=0
		  ~~~~~~~~~~^

> 0=1+(x^2++1)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 10
		  0=1+(x^2++1)
		  ~~~~~~~~~^

> 0=1+(x^2+-1)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 10
		  0=1+(x^2+-1)
		  ~~~~~~~~~^

> 0=1+(x^2+*1)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 10
		  0=1+(x^2+*1)
		  ~~~~~~~~~^

> 0=1+(x^2+**1)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 10
		  0=1+(x^2+**1)
		  ~~~~~~~~~^

> 0=1+(x^2+/1)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 10
		  0=1+(x^2+/1)
		  ~~~~~~~~~^

> 0=1+(x^2+%1)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 10
		  0=1+(x^2+%1)
		  ~~~~~~~~~^

> 0=1+(2+(x^2++1)+3)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 13
		  0=1+(2+(x^2++1)+3)
		  ~~~~~~~~~~~~^

> 0=1+(2+(x^2+-1)+3)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 13
		  0=1+(2+(x^2+-1)+3)
		  ~~~~~~~~~~~~^

> 0=1+(2+(x^2+*1)+3)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 13
		  0=1+(2+(x^2+*1)+3)
		  ~~~~~~~~~~~~^

> 0=1+(2+(x^2+**1)+3)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 13
		  0=1+(2+(x^2+**1)+3)
		  ~~~~~~~~~~~~^

> 0=1+(2+(x^2+/1)+3)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 13
		  0=1+(2+(x^2+/1)+3)
		  ~~~~~~~~~~~~^

> 0=1+(2+(x^2+%1)+3)
Parse.cpp: Parse::check_operator(int str_type, std::string str)
error: syntax error: invalid use of operator: expect number before using operator: at position 13
		  0=1+(2+(x^2+%1)+3)
		  ~~~~~~~~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> wrong complicate expression
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 28
		  wrong complicate expression
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> +(5*3/2+1)*x*x^1+(+(-1)/(-2)*x^1+3*1/2=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 37
		  (5*3/2+1)*x*x^1+(+(-1)/(-2)*x^1+3*1/2=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> -((2+4+6x-1*(3x-3+1*3*(-2)*+1*2*(-1)*(-1)*(+3x)*2+x+3)*(-1)*(2)))+3)-1=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 73
		  -1*((2+4+6*x-1*(3*x-3+1*3*(-2)*+1*2*(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> +2*(2x+3)*)(x+x)*2/2/2+1+x=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 11
		  2*(2*x+3)*)(x+x)*2/2/2+1+x=0
		  ~~~~~~~~~~^

> 0=-(5*3/2+1)*x*x^1+(+(-1)/(-2)*x^1+3*1/2
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 40
		  0=-(5*3/2+1)*x*x^1+(+(-1)/(-2)*x^1+3*1/2
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=+((2+4+6x-1*(3x-3+1*3*(-2)*+1*2*(-1)*(-1)*(+3x)*2+x+3)*(-1)*(2)))+3)-1
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 73
		  0=+((2+4+6*x-1*(3*x-3+1*3*(-2)*+1*2*(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=-2*(2x+3)*)(x+x)*2/2/2+1+x
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 14
		  0=-2*(2*x+3)*)(x+x)*2/2/2+1+x
		  ~~~~~~~~~~~~~^

> (5*3/2+1)*x*x^1+(+(-1)/(-2)*x^1+3*1/2=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 37
		  (5*3/2+1)*x*x^1+(+(-1)/(-2)*x^1+3*1/2=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ((2+4+6x-1*(3x-3+1*3*(-2)*+1*2*(-1)*(-1)*(+3x)*2+x+3)*(-1)*(2)))+3)-1=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 70
		  ((2+4+6*x-1*(3*x-3+1*3*(-2)*+1*2*(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 2*(2x+3)*)(x+x)*2/2/2+1+x=0
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 11
		  2*(2*x+3)*)(x+x)*2/2/2+1+x=0
		  ~~~~~~~~~~^

> 0=(5*3/2+1)*x*x^1+(+(-1)/(-2)*x^1+3*1/2
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 39
		  0=(5*3/2+1)*x*x^1+(+(-1)/(-2)*x^1+3*1/2
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=((2+4+6x-1*(3x-3+1*3*(-2)*+1*2*(-1)*(-1)*(+3x)*2+x+3)*(-1)*(2)))+3)-1
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 72
		  0=((2+4+6*x-1*(3*x-3+1*3*(-2)*+1*2*(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=2*(2x+3)*)(x+x)*2/2/2+1+x
Parse.cpp: Parse::check_brackets(int str_type, int bracket_type, std::string str)
error: syntax error: incorrect use of brackets: bracket(s) not pair: at position 13
		  0=2*(2*x+3)*)(x+x)*2/2/2+1+x
		  ~~~~~~~~~~~~^

> (5*3/2+1)*x*x^1(+1*(-1))/(-2)*x^1+3*1/2=0
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening round bracket: at position 15
		  (5*3/2+1)*x*x^1(+1*(-1))/(-2)*x^1+3*1/2=0
		  ~~~~~~~~~~~~~~^

> ((2+4+6x-1*(3x-3+1*3*(-2)*(+1*2(-1)*(-1)*(+3x)*2+x+3)*(-1)*(2)))+3)-1=0
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening round bracket: at position 33
		  ((2+4+6*x-1*(3*x-3+1*3*(-2)*(+1*2(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 2(2x+3)*(x+x)*2/2/2+1+x=0
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening round bracket: at position 1
		  2(2*x+3)*(x+x)*2/2/2+1+x=0
		  ^

> 0=(5*3/2+1)*x*x^1(+1*(-1))/(-2)*x^1+3*1/2
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening round bracket: at position 17
		  0=(5*3/2+1)*x*x^1(+1*(-1))/(-2)*x^1+3*1/2
		  ~~~~~~~~~~~~~~~~^

> 0=((2+4+6x-1*(3x-3+1*3*(-2)*(+1*2(-1)*(-1)*(+3x)*2+x+3)*(-1)*(2)))+3)-1
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening round bracket: at position 35
		  0=((2+4+6*x-1*(3*x-3+1*3*(-2)*(+1*2(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=2(2x+3)*(x+x)*2/2/2+1+x
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening round bracket: at position 3
		  0=2(2*x+3)*(x+x)*2/2/2+1+x
		  ~~^

> (5*3/2+1)x*x^1+(+1*(-1))/(-2)*x^1+3*1/2=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 10
		  (5*3/2+1)x*x^1+(+1*(-1))/(-2)*x^1+3*1/2=0
		  ~~~~~~~~~^

> ((2+4+6x-1*(3x-3+1*3*(-2)*(+1*2*(-1)*(-1)(+3x)*2+x+3)*(-1)*(2)))+3)-1=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 44
		  ((2+4+6*x-1*(3*x-3+1*3*(-2)*(+1*2*(-1)*(-1)(+3*x)*2+x+3)*(-1)*(2)))+3)-1=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 2*(2x+3)(x+x)*2/2/2+1+x=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 10
		  2*(2*x+3)(x+x)*2/2/2+1+x=0
		  ~~~~~~~~~^

> 0=(5*3/2+1)x*x^1+(+1*(-1))/(-2)*x^1+3*1/2
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 12
		  0=(5*3/2+1)x*x^1+(+1*(-1))/(-2)*x^1+3*1/2
		  ~~~~~~~~~~~^

> 0=((2+4+6x-1*(3x-3+1*3*(-2)*(+1*2*(-1)*(-1)(+3x)*2+x+3)*(-1)*(2)))+3)-1
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 46
		  0=((2+4+6*x-1*(3*x-3+1*3*(-2)*(+1*2*(-1)*(-1)(+3*x)*2+x+3)*(-1)*(2)))+3)-1
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=2*(2x+3)(x+x)*2/2/2+1+x
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 12
		  0=2*(2*x+3)(x+x)*2/2/2+1+x
		  ~~~~~~~~~~~^

> 
Warning: the input is empty
> a=+2[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 4
		  a=+2[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])
		  ~~~^

> a=-[[+1,-1];[-3,-2];[-1,-3]]**(-1)[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 33
		  a=-[[+1,-1];[-3,-2];[-1,-3]]**(-1)[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> -2[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])=a
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 4
		  -1*2[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])=a
		  ~~~^

> +[[+1,-1];[-3,-2];[-1,-3]]**(-1)[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]=a
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 30
		  [[+1,-1];[-3,-2];[-1,-3]]**(-1)[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]=a
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> a=2[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 3
		  a=2[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])
		  ~~^

> a=[[+1,-1];[-3,-2];[-1,-3]]**(-1)[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 32
		  a=[[+1,-1];[-3,-2];[-1,-3]]**(-1)[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> a=-1*[+3,-2]-[+12,3]*3[-1,-2]
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 22
		  a=-1*[+3,-2]-[+12,3]*3[-1,-2]
		  ~~~~~~~~~~~~~~~~~~~~~^

> 2[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])=a
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 1
		  2[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])=a
		  ^

> [[+1,-1];[-3,-2];[-1,-3]]**(-1)[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]=a
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 30
		  [[+1,-1];[-3,-2];[-1,-3]]**(-1)[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]=a
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> -1*[+3,-2]-[+12,3]*3[-1,-2]=a
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 22
		  -1*1*[+3,-2]-[+12,3]*3[-1,-2]=a
		  ~~~~~~~~~~~~~~~~~~~~~^

> a=2*[[+1,-2];[-3,-2];[-1,-2]](-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing square bracket: at position 30
		  a=2*[[+1,-2];[-3,-2];[-1,-2]](-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> a=[[+1,-1];[-3,-2];[-1,-3]](-1)*[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing square bracket: at position 28
		  a=[[+1,-1];[-3,-2];[-1,-3]](-1)*[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> a=-1*[+3,-2]-[+12,3]3*[-1,-2]
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing square bracket: at position 21
		  a=-1*[+3,-2]-[+12,3]3*[-1,-2]
		  ~~~~~~~~~~~~~~~~~~~~^

> 2*[[+1,-2];[-3,-2];[-1,-2]](-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])=a
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing square bracket: at position 28
		  2*[[+1,-2];[-3,-2];[-1,-2]](-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])=a
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> [[+1,-1];[-3,-2];[-1,-3]](-1)*[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]=a
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing square bracket: at position 26
		  [[+1,-1];[-3,-2];[-1,-3]](-1)*[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]=a
		  ~~~~~~~~~~~~~~~~~~~~~~~~~^

> -1*[+3,-2]-[+12,3]3*[-1,-2]=a
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing square bracket: at position 21
		  -1*1*[+3,-2]-[+12,3]3*[-1,-2]=a
		  ~~~~~~~~~~~~~~~~~~~~^

> 
Warning: the input is empty
> +3f+f(1)2f(a)+f(2f+1)+f(x)+f(2f-1)=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 9
		  3*f+f(1)2*f(a)+f(2*f+1)+f(x)+f(2*f-1)=0
		  ~~~~~~~~^

> -3f+f(1)2f(a)+f(2f+1)+f(x)+f(2f-1)=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 12
		  -1*3*f+f(1)2*f(a)+f(2*f+1)+f(x)+f(2*f-1)=0
		  ~~~~~~~~~~~^

> 3f+f(1)2f(a)+f(2f+1)+f(x)+f(2f-1)=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 9
		  3*f+f(1)2*f(a)+f(2*f+1)+f(x)+f(2*f-1)=0
		  ~~~~~~~~^

> 3f+f(1)+2f(a)f(2f+1)+f(x)+f(2f-1)=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 16
		  3*f+f(1)+2*f(a)f(2*f+1)+f(x)+f(2*f-1)=0
		  ~~~~~~~~~~~~~~~^

> 3f+f(1)+2f(a)+f(2f+1)f(x)+f(2f-1)=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 25
		  3*f+f(1)+2*f(a)+f(2*f+1)f(x)+f(2*f-1)=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~^

> 3f+f(1)+2f(a)+f(2f+1)+f(x)f(2f-1)=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 30
		  3*f+f(1)+2*f(a)+f(2*f+1)+f(x)f(2*f-1)=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=-3f+f(1)2f(a)+f(2f+1)+f(x)+f(2f-1)
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 12
		  0=-3*f+f(1)2*f(a)+f(2*f+1)+f(x)+f(2*f-1)
		  ~~~~~~~~~~~^

> 0=+3f+f(1)2f(a)+f(2f+1)+f(x)+f(2f-1)
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 12
		  0=+3*f+f(1)2*f(a)+f(2*f+1)+f(x)+f(2*f-1)
		  ~~~~~~~~~~~^

> 0=3f+f(1)2f(a)+f(2f+1)+f(x)+f(2f-1)
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 11
		  0=3*f+f(1)2*f(a)+f(2*f+1)+f(x)+f(2*f-1)
		  ~~~~~~~~~~^

> 0=3f+f(1)+2f(a)f(2f+1)+f(x)+f(2f-1)
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 18
		  0=3*f+f(1)+2*f(a)f(2*f+1)+f(x)+f(2*f-1)
		  ~~~~~~~~~~~~~~~~~^

> 0=3f+f(1)+2f(a)+f(2f+1)f(x)+f(2f-1)
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 27
		  0=3*f+f(1)+2*f(a)+f(2*f+1)f(x)+f(2*f-1)
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=3f+f(1)+2f(a)+f(2f+1)+f(x)f(2f-1)
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 32
		  0=3*f+f(1)+2*f(a)+f(2*f+1)+f(x)f(2*f-1)
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 
Warning: the input is empty
> +f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 5
		  f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~^

> -f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 8
		  -1*f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~~~~^

> +f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 51
		  f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> -f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 54
		  -1*f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 5
		  f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~^

> f(x)+f(1)a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 10
		  f(x)+f(1)a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~~~~~~^

> f(x)+f(1)a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 10
		  f(x)+f(1)a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~~~~~~^

> f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 33
		  f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3][1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 42
		  f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3][1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]=0
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 51
		  f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]=0
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=+f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 8
		  0=+f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~~^

> 0=-f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 8
		  0=-f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~~^

> 0=+f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 54
		  0=+f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=-f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 54
		  0=-f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 7
		  0=f(x)f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~^

> 0=f(x)+f(1)a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 12
		  0=f(x)+f(1)a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~~~~~~^

> 0=f(x)+f(1)a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::check_after_close_bracket(std::string str, size_t close_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator after closing round bracket: at position 12
		  0=f(x)+f(1)a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~~~~~~^

> 0=f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::check_before_open_bracket(std::string str, size_t open_idx, size_t pos)
error: syntax error: invalid use of operator: expect operator before opening square bracket: at position 35
		  0=f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3][1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 44
		  0=f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3][1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 0=f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]
Parse.cpp: Parse::skip_vector_matrix_function(std::string str, std::string &new_str, size_t i, size_t pos)
error: syntax error: invalid character exists: at position 53
		  0=f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3][[1,2];[3,4]]+[[1,2i];[3i,4]]
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> right complicate expression
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 28
		  right complicate expression
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> (5*3/2+1)*x*x^1+(+1*(-1))/(-2)*x^1+3*1/2=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: (5*3/2+1)*x*x^1+(+1*(-1))/(-2)*x^1+3*1/2=0
str after converting: (5*3/2+1)*x*x^1+(+1*(-1))/(-2)*x^1+3*1/2=0
input: (5321)xx1(+1(-1))(-2)x1312=0
> ((2+4+6x-1*(3x-3+1*3*(-2)*(+1*2*(-1)*(-1)*(+3x)*2+x+3)*(-1)*(2)))+3)-1=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: ((2+4+6*x-1*(3*x-3+1*3*(-2)*(+1*2*(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1=0
str after converting: ((2+4+6*x-1*(3*x-3+1*3*(-2)*(+1*2*(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1=0
input: ((246x1(3x313(-2)(+12(-1)(-1)(+3x)2x3)(-1)(2)))3)1=0
> 2*(2x+3)*(x+x)*2/2/2+1+x=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: 2*(2*x+3)*(x+x)*2/2/2+1+x=0
str after converting: 2*(2*x+3)*(x+x)*2/2/2+1+x=0
input: 2(2x3)(xx)2221x=0
> 
Warning: the input is empty
> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> right parsing
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 14
		  right parsing
		  ~~~~~~~~~~~~~^

> ---------------------------------
Parse.cpp: Parse::check_equal_sign(std::string str)
error: syntax error: equal(=) sign is missing: at position 34
		  ---------------------------------
		  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^

> a**b=+3332*abcdef+3.22%2+iiiii*(+2/(-2))+32
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a**b=+3332*abcdef+3.22%2+iiiii*(+2/(-2))+32
str after converting: (1.1)**(1+1i)=+3332*abcdef+3.22%2+iiiii*(+2/(-2))+32
input: (1.1)(1+1i)=+3332abcdef3.222iiiii(+2(-2))32
> a**b=+3332*abcdef+3.22%2+[+1,-2,+3]+[[+1,-2];[+3,-3];[1,-3]]-(-iiiii)*(+2/2)+32
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a**b=+3332*abcdef+3.22%2+[+1,-2,+3]+[[+1,-2];[+3,-3];[1,-3]]-(-iiiii)*(+2/2)+32
str after converting: (1.1)**(1+1i)=+3332*abcdef+3.22%2+[+1,-2,+3]+[[+1,-2];[+3,-3];[1,-3]]-(-iiiii)*(+2/2)+32
input: (1.1)(1+1i)=+3332abcdef3.222[+1,-2,+3][[+1,-2];[+3,-3];[1,-3]](-iiiii)(+22)32
> a=  [ [+1,-2]; [-3,-2]; [-1,-2]] ** (-1*[ [+1,-2]; [-1, +2];[-3,-2]; [-1,-2]])
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a=[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])
str after converting: (1.1)=[[+1,-2];[-3,-2];[-1,-2]]**(-1*[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])
input: (1.1)=[[+1,-2];[-3,-2];[-1,-2]](-1[[+1,-2];[-1,+2];[-3,-2];[-1,-2]])
> a=  [ [+1,-1]; [-3,-2]; [-1,-3]] ** (-1)*[ [+1,-4]; [-1, +5];[-3,-6]; [-1,-7]]
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a=[[+1,-1];[-3,-2];[-1,-3]]**(-1)*[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]
str after converting: (1.1)=[[+1,-1];[-3,-2];[-1,-3]]**(-1)*[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]
input: (1.1)=[[+1,-1];[-3,-2];[-1,-3]](-1)[[+1,-4];[-1,+5];[-3,-6];[-1,-7]]
> a=  -1*[+3,-2]-[+12,3]*3+[-1,-2]
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a=-1*[+3,-2]-[+12,3]*3+[-1,-2]
str after converting: (1.1)=-1*[+3,-2]-[+12,3]*3+[-1,-2]
input: (1.1)=-1[+3,-2][+12,3]3[-1,-2]
> 
Warning: the input is empty
> 1^2=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: 1^2=0
str after converting: 1^2=0
input: 12=0
> (1)^2=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: (1)^2=0
str after converting: (1)^2=0
input: (1)2=0
> a^1=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a^1=0
str after converting: (1.1)^1=0
input: (1.1)1=0
> a^(1)=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a^(1)=0
str after converting: (1.1)^(1)=0
input: (1.1)(1)=0
> a^(+1)=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a^(+1)=0
str after converting: (1.1)^(+1)=0
input: (1.1)(+1)=0
> a^(-1)=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a^(-1)=0
str after converting: (1.1)^(-1)=0
input: (1.1)(-1)=0
> ((a))^(((-1)))=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: ((a))^(((-1)))=0
str after converting: ((a))^(((-1)))=0
input: ((a))(((-1)))=0
> i^1+i^2+i^3+i^4=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: i^1+i^2+i^3+i^4=0
str after converting: i^1+i^2+i^3+i^4=0
input: i1i2i3i4=0
> 
Warning: the input is empty
> a**b=+3332*abcdef^2+3.22%2+iiiii*32
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a**b=+3332*abcdef^2+3.22%2+iiiii*32
str after converting: (1.1)**(1+1i)=+3332*abcdef^2+3.22%2+iiiii*32
input: (1.1)(1+1i)=+3332abcdef23.222iiiii32
> +3332*abcdef^2+3.22%2+iiiii*32=a**b
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: 3332*abcdef^2+3.22%2+iiiii*32=a**b
str after converting: 3332*abcdef^2+3.22%2+iiiii*32=(1.1)**(1+1i)
input: 3332abcdef23.222iiiii32=(1.1)(1+1i)
> f(x)+f(1x)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: f(x)+f(1*x)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
str after converting: ((x)^2+1)+((1*x)^2+1)+(1.1)+(1+1i)+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
input: ((x)^2+1)((1*x)^2+1)(1.1)(1+1i)1.12.223.3i4.4i[1,2,3][1,2i,3][[1,2];[3,4]][[1,2i];[3i,4]]=0
> 
Warning: the input is empty
> 1.1+2.2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: 1.1+2.2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
str after converting: 1.1+2.2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
input: 1.12.23.3i4.4i[1,2,3][1,2i,3][[1,2];[3,4]][[1,2i];[3i,4]]=0
> 1.1+2.2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0?
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: 1.1+2.2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0?
str after converting: 1.1+2.2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0?
input: 1.12.23.3i4.4i[1,2,3][1,2i,3][[1,2];[3,4]][[1,2i];[3i,4]]=0?
> 1.1+2.2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=?
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: 1.1+2.2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=?
str after converting: 1.1+2.2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=?
input: 1.12.23.3i4.4i[1,2,3][1,2i,3][[1,2];[3,4]][[1,2i];[3i,4]]=?
> 
Warning: the input is empty
> ((2+4+6x-1*f(x)+f(3x)*(3x-3+1*3*(-2)*(+1*2*(-1)*(-1)*(+3x)*2+x+3)*(-1)*(2)))+3)-1=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: ((2+4+6*x-1*f(x)+f(3*x)*(3*x-3+1*3*(-2)*(+1*2*(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1=0
str after converting: ((2+4+6*x-1*((x)^2+1)+((3*x)^2+1)*(3*x-3+1*3*(-2)*(+1*2*(-1)*(-1)*(+3*x)*2+x+3)*(-1)*(2)))+3)-1=0
input: ((246x1((x)^2+1)((3*x)^2+1)(3x313(-2)(+12(-1)(-1)(+3x)2x3)(-1)(2)))3)1=0
> a**b=+3332*abcdef+3.22%2+[+1,-2,+3]+[[+1,-2];[+3,-3];[1,-3]]-(-iiiii)*(+2/2)+32
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a**b=+3332*abcdef+3.22%2+[+1,-2,+3]+[[+1,-2];[+3,-3];[1,-3]]-(-iiiii)*(+2/2)+32
str after converting: (1.1)**(1+1i)=+3332*abcdef+3.22%2+[+1,-2,+3]+[[+1,-2];[+3,-3];[1,-3]]-(-iiiii)*(+2/2)+32
input: (1.1)(1+1i)=+3332abcdef3.222[+1,-2,+3][[+1,-2];[+3,-3];[1,-3]](-iiiii)(+22)32
> 
Warning: the input is empty
> f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: f(x)+f(1)+a+b+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
str after converting: ((x)^2+1)+((1)^2+1)+(1.1)+(1+1i)+1.1+2.2^2+3.3i+4.4i+[1,2,3]+[1,2i,3]+[[1,2];[3,4]]+[[1,2i];[3i,4]]=0
input: ((x)^2+1)((1)^2+1)(1.1)(1+1i)1.12.223.3i4.4i[1,2,3][1,2i,3][[1,2];[3,4]][[1,2i];[3i,4]]=0
> 
Warning: the input is empty
> -a+b+x+3f+f(1)+2f(a)+f(2f+1)+f(x)+f(2f-1)=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: -1*a+b+x+3*f+f(1)+2*f(a)+f(2*f+1)+f(x)+f(2*f-1)=0
str after converting: -1*(1.1)+(1+1i)+x+3*([1+1i,2+2i,3+3i])+((1)^2+1)+2*((1.1)^2+1)+((2*([1+1i,2+2i,3+3i])+1)^2+1)+((x)^2+1)+((2*([1+1i,2+2i,3+3i])-1)^2+1)=0
input: -1(1.1)(1+1i)x3([1+1i,2+2i,3+3i])((1)^2+1)2((1.1)^2+1)((2*([1+1i,2+2i,3+3i])+1)^2+1)((x)^2+1)((2*([1+1i,2+2i,3+3i])-1)^2+1)=0
> +a+b+x+3g+g(1)+2g(a)+g(2f+1)+g(x)+g(2f-1)=0
variable
a
1.1
═══════════════════════
b
1+1i
═══════════════════════
c
[[1.1,2.2];[3.3,4.4]]
═══════════════════════
d
[[1+1i,2+2i];[3+3i,4+4i]]
═══════════════════════
e
[1.1,2.2,3.3]
═══════════════════════
f
[1+1i,2+2i,3+3i]
═══════════════════════
=============================================================
function
f
x^2+1
═══════════════════════
str before converting: a+b+x+3*g+g(1)+2*g(a)+g(2*f+1)+g(x)+g(2*f-1)=0
str after converting: (1.1)+(1+1i)+x+3*g+g(1)+2*g(1.1)+g(2*([1+1i,2+2i,3+3i])+1)+g(x)+g(2*([1+1i,2+2i,3+3i])-1)=0
input: (1.1)(1+1i)x3gg(1)2g(1.1)g(2*([1+1i,2+2i,3+3i])+1)g(x)g(2*([1+1i,2+2i,3+3i])-1)=0
> exit
Program terminated
==485137== 
==485137== HEAP SUMMARY:
==485137==     in use at exit: 0 bytes in 0 blocks
==485137==   total heap usage: 1,258,654 allocs, 1,258,654 frees, 33,338,799 bytes allocated
==485137== 
==485137== All heap blocks were freed -- no leaks are possible
==485137== 
==485137== For lists of detected and suppressed errors, rerun with: -s
==485137== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
